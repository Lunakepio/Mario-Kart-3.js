/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 --shadows ./models/kart.glb
*/

import { useEffect, useRef } from "react";
import { MeshTransmissionMaterial, useGLTF, useKeyboardControls, useProgress} from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { damp } from "three/src/math/MathUtils.js";
import VFXEmitter from "../wawa-vfx/VFXEmitter.tsx";
import { getDriftLevel } from "../constants.js";
import { Glow } from "../particles/drift/glow/Glow.jsx";
import { useGameStore } from "../store.js";
import { Raycaster, Vector3} from "three";
import { KartDust } from "./KartDust.jsx";
import { Sparks } from "../particles/sparks/Sparks.jsx";
import { Skate } from "../particles/drift/Skate/Skate.jsx";
import { Trails } from "../particles/sparks/Trails.jsx";
const raycaster = new Raycaster();

export function Kart({
  speed,
  driftDirection,
  driftPower,
  jumpOffset,
  backWheelOffset,
  inputTurn
}) {
  const { nodes, materials } = useGLTF("/models/kart.glb");

  const wheel3 = useRef(null);
  const wheel2 = useRef(null);
  const wheel1 = useRef(null);
  const wheel0 = useRef(null);
  
  const wheel0Base = useRef(null)
  const wheel1Base = useRef(null)
  const wheel2Base = useRef(null)
  const wheel3Base = useRef(null)
  
  const groupRef = useRef(null);
  const frontWheels = useRef(null);
  const dustWheelStates = useRef([
    { position: new Vector3(), shouldEmit: false },
    { position: new Vector3(), shouldEmit: false },
    { position: new Vector3(), shouldEmit: false },
    { position: new Vector3(), shouldEmit: false },
  ]);

  const {progress} = useProgress();
  const bodyRef = useRef(null);

  const leftParticles = useRef(null);
  const rightParticles = useRef(null);

  const sparksLeftRef = useRef(null);
  const sparksRightRef = useRef(null);

  const skate1Ref = useRef(null);
  const skate2Ref = useRef(null);

  const glow1Ref = useRef(null);
  const glow2Ref = useRef(null);

  const smoke1Ref = useRef(null);
  const smoke2Ref = useRef(null);

  const [, get] = useKeyboardControls();
  const yRotation = useRef(0);
  const wheelRef = useRef(null);

  const isDriftingRef = useRef(false);

  const flamePositionLeftRef = useRef(null);
  const flamePositionRightRef = useRef(null);

  const groundMeshes = useRef([]);

  const setFlamePositions = useGameStore((state) => state.setFlamePositions);
  const setBoostPower = useGameStore((state) => state.setBoostPower);
  const setDriftLevel = useGameStore((state) => state.setDriftLevel);
  const setGroundPosition = useGameStore((state) => state.setGroundPosition);
  const setWheelPositions = useGameStore((state) => state.setWheelPositions);
  const { scene } = useThree();
  const direction = new Vector3(0, -1, 0)

  function rotateWheels(left, right, delta) {
    const rotationSpeed = speed.current * 0.01;
    wheel0.current.rotation.x += rotationSpeed;
    wheel1.current.rotation.x += rotationSpeed;
    wheel2.current.rotation.x += rotationSpeed;
    wheel3.current.rotation.x += rotationSpeed;

    yRotation.current = damp(
      yRotation.current,
      inputTurn.current,
      4, delta
    );

    frontWheels.current.rotation.y = yRotation.current;
    wheelRef.current.rotation.y = yRotation.current * Math.PI * 4;
  }

  function getGroundPosition(wheelBase, wheel, offset = 0, wheelIndex, delta) {
    const origin = new Vector3();


  
    wheelBase.current.getWorldPosition(origin);
  
    raycaster.set(origin, direction);
    raycaster.far = 3;
    raycaster.firstHitOnly = true;
  
    const intersects = raycaster.intersectObjects(scene.children, true);
  
    if (intersects.length > 0) {
      const hit = intersects[0];
      if (hit.object.name.includes("ground")) {
        const safeY = Math.max(
          hit.point.y + 0.78 + jumpOffset.current + offset,
          wheel.current.position.y - 0.1
        );
        wheel.current.position.y = safeY;
  
        wheel.current.lastSafeY = safeY;
      }
  
      wheel.current.isOnDirt = hit.object.name.includes("dirt") &&
        speed.current > 5 &&
        jumpOffset.current === 0;
  
      if ((wheelIndex === 2 || wheelIndex === 3) && driftPower.current > 0.01 && jumpOffset.current === 0 && offset < 0.05) {
        wheel.current.isOnDirt = true;
      }
    } else {
      if (typeof wheel.current.lastSafeY === "number") {
        wheel.current.position.y = damp(
          wheel.current.position.y,
          wheel.current.lastSafeY,
          4,
          delta
        );
      }
    }
  }

  function getWheelPositions() {
    const wheelPositions = [wheel0, wheel1, wheel2, wheel3].map(
      (wheel, index) => {
        const position = wheel.current.getWorldPosition(new Vector3());
        const localPos = wheel.current.position;
        dustWheelStates.current[index].position = localPos;
        dustWheelStates.current[index].shouldEmit = wheel.current.isOnDirt;

        index == 2
          ? leftParticles.current.position.set(
              localPos.x - 0.2,
              localPos.y - 0.7,
              localPos.z - 0.2,
            )
          : null;
        index == 3
          ? rightParticles.current.position.set(
              localPos.x + 0.2,
              localPos.y - 0.7,
              localPos.z - 0.2,
            )
          : null;

        return position;
      },
    );
    return wheelPositions;
  }

  function moveAndRotateKart(wheelPositions) {
    const a = wheelPositions[0];
    const b = wheelPositions[1];
    const c = wheelPositions[2];
    const d = wheelPositions[3];

    const pitch = (c.y + d.y - (a.y + b.y)) * 0.5;
    const roll = (b.y - a.y + d.y - c.y) * 0.5;

    const averageYPos = 0.65 + (a.y + b.y + c.y + d.y) / 4;
    setGroundPosition(averageYPos);

    bodyRef.current.rotation.x = pitch;

    bodyRef.current.rotation.z = roll;

    bodyRef.current.position.y = averageYPos + jumpOffset.current * 0.1;
  }
  useFrame((_, delta) => {
    if (wheel0.current && wheel1.current && wheel2.current && wheel3.current) {
      if (groundMeshes.current.length < 2) {
        scene.traverse((obj) => {
          if (
            obj.isMesh &&
            obj.name.includes("ground") &&
            obj.geometry.boundsTree
          ) {
            groundMeshes.current.push(obj);
          }
        });
      }
      const isDrifting = !!driftDirection.current && jumpOffset.current === 0;
      const { left, right } = get();

      rotateWheels(left, right, delta);

      getGroundPosition(wheel0Base, wheel0, backWheelOffset.current.right, 0, delta);
      getGroundPosition(wheel1Base, wheel1, backWheelOffset.current.left, 1, delta);
      getGroundPosition(wheel2Base, wheel2, backWheelOffset.current.right, 2, delta);
      getGroundPosition(wheel3Base, wheel3, backWheelOffset.current.left, 3, delta);

      const wheelPositions = getWheelPositions();

      setWheelPositions([...wheelPositions, bodyRef.current]);
      moveAndRotateKart(wheelPositions, delta);

      if (speed.current > 15) {
        smoke1Ref.current?.stopEmitting();
        smoke2Ref.current?.stopEmitting();
      } else {
        smoke1Ref.current?.startEmitting();
        smoke2Ref.current?.startEmitting();
      }

      groupRef.current.rotation.y = damp(
        groupRef.current.rotation.y,
        driftDirection.current * 0.4,
        4, delta
      );

      const driftLevel = getDriftLevel(driftPower.current);
      if (isDrifting !== isDriftingRef.current) {
        isDriftingRef.current = isDrifting;
        if (isDrifting) {
          sparksLeftRef?.current?.setEmitState(true);
          sparksRightRef?.current?.setEmitState(true);
          glow1Ref?.current?.setOpacity(1);
          glow2Ref?.current?.setOpacity(1);
          skate1Ref?.current?.setOpacity(1);
          skate2Ref?.current?.setOpacity(1);
        } else {
          sparksLeftRef?.current?.setEmitState(false);
          sparksRightRef?.current?.setEmitState(false);
          glow1Ref?.current?.setOpacity(0);
          glow2Ref?.current?.setOpacity(0);
          skate1Ref?.current?.setOpacity(0);
          skate2Ref?.current?.setOpacity(0);
        }
      }

      bodyRef.current.isDrifting = isDrifting;
      if (isDrifting) {
        glow1Ref?.current?.setColor(driftLevel.color);
        glow2Ref?.current?.setColor(driftLevel.color);
        glow1Ref?.current?.setLevel(driftLevel.threshold);
        glow2Ref?.current?.setLevel(driftLevel.threshold);

        sparksLeftRef?.current?.setColor(driftLevel.color);
        sparksRightRef?.current?.setColor(driftLevel.color);
      }
      setDriftLevel(driftLevel);

      setFlamePositions([
        flamePositionLeftRef.current.getWorldPosition(new Vector3()),
        flamePositionRightRef.current.getWorldPosition(new Vector3()),
      ]);
      setBoostPower(driftLevel.threshold / 2);
    }
  });

  useEffect(() => {
    if (glow1Ref.current && glow2Ref.current && bodyRef.current) {
      glow1Ref?.current?.setOpacity(0);
      glow2Ref?.current?.setOpacity(0);
    }
  }, []);
  return (
    <>
      {/* <pointLight intensity={2000} position={[0, 10, 0]}/> */}

      <group key={progress} ref={groupRef} dispose={null}>
        <group rotation-y={Math.PI}>
          <group ref={leftParticles}>
            <Glow ref={glow1Ref} driftDirection={driftDirection} />
            <Sparks ref={sparksLeftRef} />
            <Trails />

            <group position={[0.15, 0.2, -0.2]}>
              <Skate ref={skate1Ref} />
            </group>
          </group>
          <group ref={rightParticles}>
            <Glow ref={glow2Ref} driftDirection={driftDirection} />
            <Sparks ref={sparksRightRef} left={true} />
            <Trails left={true} />
            <group position={[-0.15, 0.2, -0.2]}>
              <Skate ref={skate2Ref} />
            </group>
          </group>
        </group>

        <group position-y={-0.5} scale={1} rotation-y={Math.PI}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.body.geometry}
            material={materials.m_Body}
            ref={bodyRef}
          >
            <group ref={wheel2Base} position={[-.77, 0, -.7]} />
            <group ref={wheel3Base} position={[0.77, 0, -0.7]} />
            <group ref={wheel1Base} position={[0.7, 0, 0.7]} />
            <group ref={wheel0Base} position={[-0.7, 0, 0.7]} />
            <KartDust wheelStates={dustWheelStates.current} />
            <mesh
              ref={wheelRef}
              castShadow
              receiveShadow
              geometry={nodes.d_wheel.geometry}
              material={materials.m_Body}
              position={[0, 0.355, 0.542]}
              rotation={[-1.134, 0, 0]}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.booster.geometry}
              material={materials.m_Body}
              position={[0, 0.25, -0.55]}
              rotation={[0.279, 0, 0]}
            />
            <group
              position={[0.5, 0.65, -1.5]}
              rotation-x={-Math.PI / 9}
              ref={flamePositionLeftRef}
            >
              <VFXEmitter
                ref={smoke1Ref}
                emitter="smoke"
                settings={{
                  duration: 0.02,
                  delay: 0.1,
                  nbParticles: 1,
                  spawnMode: "time",
                  loop: true,
                  startPositionMin: [0, 0, 0],
                  startPositionMax: [0, 0, 0],
                  startRotationMin: [0, 0, -1],
                  startRotationMax: [0, 0, 1],
                  particlesLifetime: [0.2, 0.4],
                  speed: [0.5, 1],
                  colorStart: ["#ffffff"],
                  directionMin: [-0.1, 0, 0],
                  directionMax: [0.1, 0.01, 0.5],
                  rotationSpeedMin: [0, 0, -1],
                  rotationSpeedMax: [0, 0, 1],
                  size: [0.5, 1],
                }}
              />
            </group>
            <group
              position={[-0.5, 0.65, -1.5]}
              rotation-x={-Math.PI / 9}
              ref={flamePositionRightRef}
            >
              <VFXEmitter
                ref={smoke2Ref}
                emitter="smoke"
                settings={{
                  duration: 0.02,
                  delay: 0.1,
                  nbParticles: 1,
                  spawnMode: "time",
                  loop: true,
                  startPositionMin: [0, 0, 0],
                  startPositionMax: [0, 0, 0],
                  startRotationMin: [0, 0, -1],
                  startRotationMax: [0, 0, 1],
                  particlesLifetime: [0.2, 0.4],
                  speed: [0.5, 1],
                  colorStart: ["#ffffff"],
                  directionMin: [-0.1, 0, 0],
                  directionMax: [0.1, 0.01, 0.5],
                  rotationSpeedMin: [0, 0, -1],
                  rotationSpeedMax: [0, 0, 1],
                  size: [0.5, 1],
                }}
              />
            </group>
          </mesh>

          <mesh
            ref={wheel2}
            castShadow
            receiveShadow
            geometry={nodes.wheel_2.geometry}
            material={materials.m_Tire}
            position={[-0.77, -0.137, -0.7]}
            layers={1}
            />
          <mesh
            ref={wheel3}
            castShadow
            receiveShadow
            geometry={nodes.wheel_3.geometry}
            material={materials.m_Tire}
            position={[0.77, -0.137, -0.7]}
            layers={1}
            />
          <group ref={frontWheels}>
            <mesh
              ref={wheel1}
              castShadow
              receiveShadow
              geometry={nodes.wheel_1.geometry}
              material={materials.m_Tire}
              position={[0.7, -0.2, 0.7]}
              layers={1}
              />
            <mesh
              ref={wheel0}
              castShadow
              receiveShadow
              geometry={nodes.wheel_0.geometry}
              material={materials.m_Tire}
              position={[-0.7, -0.2, 0.7]}
              layers={1}
            />
          </group>

          {/* <mesh castShadow receiveShadow geometry={nodes.shape.geometry} material={materials['default']} /> */}
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/models/kart.glb");
